apply plugin: "com.android.application"
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.greenrobot.greendao'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'realm-android'

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
        entryFile: "index.js",
        enableHermes: true,
]
project.ext.set("voiceRecognition", true);

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'
/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false)

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion '28.0.3'
    buildToolsVersion '28.0.3'

    defaultConfig {
        applicationId "com.smarttoni"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 20
        versionName "1.1.0"
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        missingDimensionStrategy 'react-native-camera', 'general'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    packagingOptions {
        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/x86_64/libjsc.so'
        pickFirst 'lib/arm64-v8a/libjsc.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
    }
    sourceSets {
        main.java.srcDirs += 'build/generated/source/greendao'
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode

            }
        }
    }
    configurations.all {
        resolutionStrategy {
            force 'androidx.media:media:1.0.0'
            force 'androidx.legacy:legacy-support-v4:1.0.0'
            force 'androidx.recyclerview:recyclerview:1.0.0-rc01'
            force 'androidx.constraintlayout:constraintlayout:1.1.2'
        }
    }
    buildTypes {
        debug {
            buildConfigField "boolean", "isVoiceRecognitionEnabled", "false"
            buildConfigField "int", "DB_VERSION", "20"
        }
        release {
            buildConfigField "boolean", "isVoiceRecognitionEnabled", "false"
            buildConfigField "int", "DB_VERSION", "20"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions "default"
    productFlavors {
        development
         {
            minSdkVersion rootProject.ext.minSdkVersion
            applicationId 'com.smarttoni.dev'
            buildConfigField "String", "BASE_URL", "\"http://demo.mypits.org:15036/\""
            buildConfigField "String", "WEB_URL", "\"http://demo.mypits.org:15037/\""
            targetSdkVersion rootProject.ext.targetSdkVersion
        }
        prelive {
            minSdkVersion rootProject.ext.minSdkVersion
            applicationId 'com.smarttoni.dev'
            buildConfigField "String", "BASE_URL", "\"http://demo.mypits.org:15036/prelive.php/\""
            buildConfigField "String", "WEB_URL", "\"http://demo.mypits.org:15037/\""
            targetSdkVersion rootProject.ext.targetSdkVersion
        }

        forTesting{
            minSdkVersion rootProject.ext.minSdkVersion
            applicationId 'com.smarttoni.uat'
            buildConfigField "String", "BASE_URL", "\"http://demo.mypits.org:15038/\""
            buildConfigField "String", "WEB_URL", "\"http:demo.mypits.org:15039/\""
            targetSdkVersion rootProject.ext.targetSdkVersion
        }
        uat {
            minSdkVersion rootProject.ext.minSdkVersion
            applicationId 'com.smarttoni'
            buildConfigField "String", "BASE_URL", "\"https://api.uat.smarttoni.com/\""
            buildConfigField "String", "WEB_URL", "\"http://briefing.uat.smarttoni.com/\""
            targetSdkVersion rootProject.ext.targetSdkVersion
        }
        live {
            minSdkVersion rootProject.ext.minSdkVersion
            applicationId 'com.smarttoni'
            buildConfigField "String", "BASE_URL", "\"http://api.smarttoni.com/\""
            buildConfigField "String", "WEB_URL", "\"http://briefing.smarttoni.com/\""
            targetSdkVersion rootProject.ext.targetSdkVersion
        }
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    dataBinding {
        enabled = true
    }
}

greendao {
    schemaVersion 21
}

dependencies {

    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"
    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.fbjni'
    }
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
    }
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
    }


    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }


    implementation project(':react-native-image-crop-picker')
    implementation project(':react-native-a-beep')
    implementation project(':rn-fetch-blob')
    implementation project(':react-native-image-picker')
    implementation project(':react-native-webview')

    implementation "com.google.android.gms:play-services-gcm:15.0.1"

    implementation project(':react-native-orientation-locker')
    implementation project(':react-native-tts')
    implementation project(':react-native-video')
    implementation project(':react-native-radial-gradient')
    implementation project(':react-native-vector-icons')
    implementation project(':react-native-localize')
    implementation project(':react-native-i18n')
    implementation project(':react-native-gesture-handler')




    //implementation project(':dev_tool')


    implementation 'androidx.appcompat:appcompat:1.1.0'
    // RxJava2 Dependencies
    implementation 'io.reactivex.rxjava2:rxjava:2.2.6'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    // From node_modules
    implementation 'com.koushikdutta.async:androidasync:2.+'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    //server app
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'org.greenrobot:greendao:3.2.2'
    implementation 'org.mindrot:jbcrypt:0.4'
    implementation 'com.github.bumptech.glide:glide:4.7.1'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.firebase:firebase-core:17.3.0'
    implementation 'com.google.firebase:firebase-crashlytics:17.3.0'
    implementation 'io.cobrowse:cobrowse-sdk-android:2.0.4'
    implementation project(':KeenASR')
    implementation 'com.github.DantSu:ESCPOS-ThermalPrinter-Android:2.0.8'
    implementation 'androidx.core:core-ktx:+'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation files('libs/common-lang3.jar')
    implementation files('libs/pull-parser-2.jar')
    implementation files('libs/common-lang3.jar')
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply plugin: 'com.google.gms.google-services'
repositories {
    mavenCentral()
    maven { url 'https://maven.google.com' }
    maven { url "https://www.jitpack.io" }
    jcenter()
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)